Scalability & High Availability

• Scalability means that an application / system can handle greater loads by adapting. 
• There are two kinds of scalability:
    • Vertical Scalability
    • Horizontal Scalability (= elasticity)
• Scalability is linked but different to High Availability


Vertical Scalability

• Vertically scalability means increasing the size of the instance
• For example, your application runs on a t2.micro
• Scaling that application vertically means running it on a t2.large
• Vertical scalability is very common for non distributed systems, such as a database. 
• RDS, ElastiCache are services that can scale vertically. 
• There’s usually a limit to how much you can vertically scale (hardware limit)


Horizontal Scalability 

• Horizontal Scalability means increasing the number of instances / systems for your application
• Horizontal scaling implies distributed systems. 
• This is very common for web applications / modern applications
• It’s easy to horizontally scale thanks the cloud offerings such as Amazon EC2


High Availability 

• High Availability usually goes hand in hand with horizontal scaling
• High availability means running your application / system in at least 2 data centers (== Availability Zones)
• The goal of high availability is to survive a data center loss

• The high availability can be passive (for RDS Multi AZ for example)
• The high availability can be active (for horizontal scaling)


High Availability & Scalability For EC2

• Vertical Scaling: Increase instance size (= scale up / down)
    • From: t2.nano - 0.5G of RAM, 1 vCPU
    • To: u-12tb1.metal – 12.3 TB of RAM, 448 vCPUs

• Horizontal Scaling: Increase number of instances (= scale out / in)
    • Auto Scaling Group
    • Load Balancer

• High Availability: Run instances for the same application across multi AZ
    • Auto Scaling Group multi AZ
    • Load Balancer multi AZ

=========================================================================================================================


What’s an Auto Scaling Group?

• In real-life, the load on your websites and application can change
• In the cloud, you can create and get rid of servers very quickly

• The goal of an Auto Scaling Group (ASG) is to:

    • Scale out (add EC2 instances) to match an increased load
    • Scale in (remove EC2 instances) to match a decreased load
    • Ensure we have a minimum and a maximum number of EC2 instances running
    • Automatically register new instances to a load balancer
    • Re-create an EC2 instance in case a previous one is terminated (ex: if unhealthy)

• ASG are free (you only pay for the underlying EC2 instances)



Auto Scaling Group Attributes :

• A Launch Template :

    • AMI + Instance Type
    • EC2 User Data
    • EBS Volumes
    • Security Groups
    • SSH Key Pair
    • IAM Roles for your EC2 Instances
    • Network + Subnets Information
    • Load Balancer Information

• Min Size / Max Size / Initial Capacity
• Scaling Policies


Auto Scaling - CloudWatch Alarms & Scaling :

• It is possible to scale an ASG based on CloudWatch alarms
• An alarm monitors a metric (such as Average CPU, or a custom metric)
• Metrics such as Average CPU are computed for the overall ASG instances
• Based on the alarm:
    • We can create scale-out policies (increase the number of instances)
    • We can create scale-in policies (decrease the number of instances)


Auto Scaling Groups – Dynamic Scaling Policies :

• Target Tracking Scaling
    • Most simple and easy to set-up
    • Example: I want the average ASG CPU to stay at around 40%

• Simple / Step Scaling
    • When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units
    • When a CloudWatch alarm is triggered (example CPU < 30%), then remove 1

• Scheduled Actions
    • Anticipate a scaling based on known usage patterns
    • Example: increase the min capacity to 10 at 5 pm on Fridays


Auto Scaling Groups – Predictive Scaling :

• Predictive scaling: continuously forecast load and schedule scaling ahead


Good metrics to scale on :

• CPUUtilization: Average CPU utilization across your instances
• RequestCountPerTarget: to make sure the number of requests per EC2 instances is stable
• Average Network In / Out (if you’re application is network bound)
• Any custom metric (that you push using CloudWatch)


Auto Scaling Groups - Scaling Cooldowns :

• After a scaling activity happens, you are in the cooldown period (default 300 seconds)
• During the cooldown period, the ASG will not launch or terminate additional instances (to allow for metrics to stabilize)

• Advice: Use a ready-to-use AMI to reduce configuration time in order to be serving request fasters and reduce the cooldown period


======================================================================================================================================
